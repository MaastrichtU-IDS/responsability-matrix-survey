# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
    plugins:
        - custom_lint

linter:
    # The lint rules applied to this project can be customized in the
    # section below to disable rules from the `package:flutter_lints/flutter.yaml`
    # included above or to enable additional rules. A list of all available lints
    # and their documentation is published at
    # https://dart-lang.github.io/linter/lints/index.html.
    #
    # Instead of disabling a lint rule for the entire project in the
    # section below, it can also be suppressed for a single line of code
    # or a specific dart file by using the `// ignore: name_of_lint` and
    # `// ignore_for_file: name_of_lint` syntax on the line or in the file
    # producing the lint.
    rules:
        # Freezed + JsonSerializable
        invalid_annotation_target: ignore
        prefer_single_quotes: true
        prefer_const_constructors: true
        avoid_empty_else: true
        avoid_print: true
        avoid_redundant_argument_values: true
        avoid_unused_constructor_parameters: false
        prefer_final_fields: true
        prefer_final_locals: true
        prefer_final_in_for_each: true
        prefer_const_constructors_in_immutables: true

        # formatting
        lines_longer_than_80_chars: false
        curly_braces_in_flow_control_structures: false
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
